#include "CONSTANTS.H"
#include "LGintegrator.H"

        subroutine SETRSCONST(
     &    CHF_CONST_REAL[auDel2],
     &    CHF_CONST_REAL[auSmallB],
     &    CHF_CONST_INT[auAver],
     &    CHF_CONST_INT[auLF])

#include "RSCommon.fh"

        del2         = auDel2
        smallB       = auSmallB
        iAveraging   = auAver
        iLaxFriedrix = auLF

        return
        end

        subroutine RIEMANNF(
     &    CHF_FRA[Wgdnv],
     &    CHF_CONST_FRA[WLeft],
     &    CHF_CONST_FRA[WRight],
     &    CHF_CONST_INT[idir],
     &    CHF_CONST_INT[iRho],
     &    CHF_BOX[box])

        integer CHF_DDECL[i; j; k]
        integer inorm, itan1, itan2, inormB, itanB1, itanB2
        real_t PGasL, RhoL, UL, VL, WL, RUL, RVL, RWL, BXL, BYL, BZL
        real_t PGasR, RhoR, UR, VR, WR, RUR, RVR, RWR, BXR, BYR, BZR
        real_t PGas,  Rho,  U,  V,  W,                 BX,  BY,  BZ
        real_t BxBL, RUxUL, PL, EL, AL2, DL, HL, coefRL
        real_t BxBR, RUxUR, PR, ER, AR2, DR, HR, coefRR
        real_t BxBH,        P,          denom, HAV

        real_t aas, as, aaf, af, alf, als, c, cc, ccmi, ccma, dfs
        real_t hyy, hyz, hzz, szb, h, kk, sih, z, del, dell2
        real_t b, bb, bx2, by2, bz2, byz2, sqPiRho, sq2PiRho
        real_t Aeigen1, Aeigen2, Aeigen3, Aeigen4, Aeigen5, Aeigen6
        real_t Aeigen7, Aeigen8
        real_t  eigen1,  eigen2,  eigen3,  eigen4,  eigen5,  eigen6
        real_t  eigen7,  eigen8,  eigmax
        real_t fl1, fl2, fl3, fl4, fl5, fl6, fl7, fl8
        real_t fr1, fr2, fr3, fr4, fr5, fr6, fr7, fr8
        real_t du1, du2, du3, du4, du5, du6, du7, du8
        real_t lu1, lu2, lu3, lu4, lu5, lu6, lu7, lu8
        real_t ra1, ra2, ra3, ra4, ra5, ra6, ra7, ra8

        real_t sp11, sp12, sp13, sp14, sp15, sp16, sp17, sp18
        real_t sp21, sp22, sp23, sp24, sp25, sp26, sp27, sp28
        real_t sp31, sp32, sp33, sp34, sp35, sp36, sp37, sp38
        real_t sp41, sp42, sp43, sp44, sp45, sp46, sp47, sp48
        real_t sp51, sp52, sp53, sp54, sp55, sp56, sp57, sp58
        real_t sp61, sp62, sp63, sp64, sp65, sp66, sp67, sp68
        real_t sp71, sp72, sp73, sp74, sp75, sp76, sp77, sp78
        real_t sp81, sp82, sp83, sp84, sp85, sp86, sp87, sp88

        real_t so11, so12, so13, so14, so15, so16, so17, so18
        real_t so21, so22, so23, so24, so25, so26, so27, so28
        real_t so31, so32, so33, so34, so35, so36, so37, so38
        real_t so41, so42, so43, so44, so45, so46, so47, so48
        real_t so51, so52, so53, so54, so55, so56, so57, so58
        real_t so61, so62, so63, so64, so65, so66, so67, so68
        real_t so71, so72, so73, so74, so75, so76, so77, so78
        real_t so81, so82, so83, so84, so85, so86, so87, so88

        integer spacedim, iVelX, iBX, iPres
        
        real_t epseig
        
        real_t qq1,qq2,qq3,qq4,qq5,qq6,qq7,qq8
        real_t qqq1,qqq2,qqq3,qqq4,qqq5,qqq6,qqq7,qqq8
        real_t qqqq1,qqqq2,qqqq3,qqqq4,qqqq5,qqqq6,qqqq7,qqqq8
        real_t du22,du33,du44,du55
        real_t gam,bet,fuj,cmas,afmc,afmas
        real_t f11,f12,f13,f14,f15,f16,f17,f18
        real_t f21,f22,f23,f24,f25,f26,f27,f28
        real_t ra,ua,va,wa,hx,hy,hz,p01,p02,p0,hh,pa
        real_t  ei1,ei3,ei4,ei5,ei6,ei7,ei8
        real_t r1,r2,rv1,rv2,rw1,rw2,e1,e2,hx1,hx2,hy1,hy2,hz1,hz2
        real_t sz1,sz2,u1,u2,v1,v2,w1,w2,hh1,kk1,hh2,kk2,ru1,ru2
        real_t pi4,p1,p2,bbb,sa,pi
        
        
        

#include "EosCommon.fh"
#include "RSCommon.fh"

        epseig = 1.d-7

        spacedim = 3

        iVelX  = iRho + 1
        iPres  = iRho + 4
        iBX    = iRho + 5

c In all cases itan1 must correspond to zero values
        inorm  = iVelX +      idir
        inormB = iBX   +      idir        
        if (idir .eq. 0) then
           itan1  = iVelX + 2
           itan2  = iVelX + 1
           
           itanB1 = iBX   + 2
           itanB2 = iBX   + 1
        else 
           itan1  = iVelX + 2
           itan2  = iVelX + 0
           
           itanB1 = iBX   + 2
           itanB2 = iBX   + 0
        endif
        
        
        

        CHF_MULTIDO[box;i;j;k]
          PGasL  = max( smallp, WLeft(CHF_IX[i;j;k],iPres) )
c          PGasL  = max( epseig, WLeft(CHF_IX[i;j;k],iPres) )
          RhoL   = max( smallr, WLeft(CHF_IX[i;j;k],iRho ) )

          UL     =              WLeft(CHF_IX[i;j;k],inorm)
          VL     =              WLeft(CHF_IX[i;j;k],itan1)
          WL     =              WLeft(CHF_IX[i;j;k],itan2)

          BXL    =              WLeft(CHF_IX[i;j;k],inormB)
          BYL    =              WLeft(CHF_IX[i;j;k],itanB1)
          BZL    =              WLeft(CHF_IX[i;j;k],itanB2)

          PGasR  = max( smallp, WRight(CHF_IX[i;j;k],iPres) )
c          PGasR  = max( epseig, WRight(CHF_IX[i;j;k],iPres) )
          RhoR   = max( smallr, WRight(CHF_IX[i;j;k],iRho ) )

          UR     =              WRight(CHF_IX[i;j;k],inorm)
          VR     =              WRight(CHF_IX[i;j;k],itan1)
          WR     =              WRight(CHF_IX[i;j;k],itan2)

          BXR    =              WRight(CHF_IX[i;j;k],inormB)
          BYR    =              WRight(CHF_IX[i;j;k],itanB1)
          BZR    =              WRight(CHF_IX[i;j;k],itanB2)

          RUL    = RhoL*UL
          RVL    = RhoL*VL
          RWL    = RhoL*WL

          BxBL   = d_1_8PI*(BXL*BXL + BYL*BYL + BZL*BZL)
          RUxUL  = half   *(RUL*UL  + RVL*VL  + RWL*WL )

          PL     = PGasL + BxBL
          EL     = PGasL/hgamma + RUxUL + BxBL

          AL2    = gamma*PGasL/RhoL

          RUR    = RhoR*UR
          RVR    = RhoR*VR
          RWR    = RhoR*WR

          BxBR   = d_1_8PI*(BXR*BXR + BYR*BYR + BZR*BZR)
          RUxUR  = half   *(RUR*UR  + RVR*VR  + RWR*WR )

          PR     = PGasR + BxBR
          ER     = PGasR/hgamma + RUxUR + BxBR

          AR2    = gamma*PGasR/RhoR
          
          
          
      r1=RhoL
      ru1=RUL
      rv1=0.d0
      rw1=RWL
      e1=EL
      hx1=BXL
      hy1=0.d0
      hz1=BZL
      
      r2=RhoR
      ru2=RUR
      rv2=0.d0
      rw2=RWR
      e2=ER
      hx2=BXR
      hy2=0.d0
      hz2=BZR

      gam = gamma
      pi4 = d_1_4PI
      BET=GAM-1.D0
      pi = d_PI
      
        u1=UL
        v1=0.d0
        w1=WL
        hh1=(hx1**2+hy1**2+hz1**2)*pi4*0.5d0
        kk1=(u1**2+v1**2+w1**2)*r1*0.5d0
        p1=(e1-kk1-hh1)*(gam-1.d0)
        
        
c--------------------------------------------------------------
      sz1=gam*p1/r1
c      szb=sz1+(hx1**2+hy1**2+hz1**2)*pi4/r1
c      sa=hx1**2*pi4/r1
c      ss=.5d0*(szb-dsqrt(szb**2-4.d0*sz1*sa))
c      ss=max(0.D0,ss)
c      sf=.5d0*(szb+dsqrt(szb**2-4.d0*sz1*sa))
c---------------------------------------------------------------
                u2=UR
                v2=0.d0
                w2=WR
                hh2=(hx2**2+hy2**2+hz2**2)*pi4*0.5d0
                kk2=(u2**2+v2**2+w2**2)*r2*0.5d0
                p2=(e2-kk2-hh2)*(gam-1.d0)
c---------------------------------------------------------------
      sz2=gam*p2/r2
c      szb=sz2+(hx2**2+hy2**2+hz2**2)*pi4/r2
c      sa=hx2**2*pi4/r2
c      ss=.5d0*(szb-dsqrt(szb**2-4.d0*sz2*sa))
c      ss=max(0.D0,ss)
      ccmi=dmin1(sz1,sz2)
      ccma=dmax1(sz1,sz2)
c---------------------------------------------------------------------
        ra=.5d0*(r1+r2)
        ua=.5d0*(u1+u2)
        va=.5d0*(v1+v2)
        wa=.5d0*(w1+w2)
        hx=0.5d0*(hx1+hx2)
        hy=(hy1+hy2)*.5d0
        hz=(hz1+hz2)*.5d0
        p01=p1+hh1
        p02=p2+hh2
        p0=(p01+p02)*.5d0
        if(sqrt(hy**2+hz**2).lt.epseig) then
        hy=epseig*0.707106781186547524400844362104849039D0
        hz=epseig*0.707106781186547524400844362104849039D0
c        hy=-epseig
c        hz=0.d0
      endif
                hh=(hx**2+hy**2+hz**2)*pi4*0.5d0
                pa=p0-hh
        bbb=hx**2*pi4/ra
        b =dsqrt(bbb)
        kk=0.5d0*(ua**2+va**2+wa**2)
        cc=gam*pa/ra
        if(cc.lt.ccmi) cc=ccmi
        if(cc.gt.ccma) cc=ccma
        c=dsqrt(cc)
      szb=cc+(hx**2+hy**2+hz**2)*pi4/ra
      sa=dsqrt(szb**2-4.d0*cc*bbb)
c      c4=cc**2
c      c3=2*cc*bb
c      cc3=2*c3
c      b4=bb**2
c      write(6,*) c4,c3,cc3,b4
c      write(6,*) hx,hy,hz,sa,szb
      aas=.5d0*(szb-dsqrt(szb**2-4.d0*cc*bbb))
      aas=dmax1(0.d0,aas)
      aaf=.5d0*(szb+dsqrt(szb**2-4.d0*cc*bbb))
c---------------------------------------------------------------
        af=dsqrt(aaf)
        as=dsqrt(aas)
      	fuj=0.3d0*(abs(ua)+abs(va)+abs(wa)+af)
                ei1=abs(ua)
                ei3=abs(ua+b)
                ei4=abs(ua-b)
                ei5=abs(ua+af)
                ei6=abs(ua-af)
                ei7=abs(ua+as)
                ei8=abs(ua-as)
	      eigmax=ei1+af


c CIR (Courant Isaacson Rees)
      IF(EI1.GE.FUJ) THEN
      EIGEN1=EI1
      EIGEN2=EI1      
      ELSE
      EIGEN1=(EI1*EI1+FUJ*FUJ)/(2.d0*FUJ)
      EIGEN2=(EI1*EI1+FUJ*FUJ)/(2.d0*FUJ)
      ENDIF
      IF(EI3.GE.FUJ) THEN
      EIGEN3=EI3     
      ELSE
      EIGEN3=(EI3*EI3+FUJ*FUJ)/(2.d0*FUJ)
      ENDIF
      IF(EI4.GE.FUJ) THEN
      EIGEN4=EI4     
      ELSE
      EIGEN4=(EI4*EI4+FUJ*FUJ)/(2.d0*FUJ)
      ENDIF
      IF(EI5.GE.FUJ) THEN
      EIGEN5=EI5     
      ELSE
      EIGEN5=(EI5*EI5+FUJ*FUJ)/(2.d0*FUJ)
      ENDIF
      IF(EI6.GE.FUJ) THEN
      EIGEN6=EI6      
      ELSE
      EIGEN6=(EI6*EI6+FUJ*FUJ)/(2.d0*FUJ)
      ENDIF
      IF(EI7.GE.FUJ) THEN
      EIGEN7=EI7      
      ELSE
      EIGEN7=(EI7*EI7+FUJ*FUJ)/(2.d0*FUJ)
      ENDIF
      IF(EI8.GE.FUJ) THEN
      EIGEN8=EI8      
      ELSE
      EIGEN8=(EI8*EI8+FUJ*FUJ)/(2.d0*FUJ)
      ENDIF          

c Lax - Friedrichs
c      EIGEN1=EIGMAX
c      EIGEN2=EIGMAX
c      EIGEN3=EIGMAX
c      EIGEN4=EIGMAX
c      EIGEN5=EIGMAX
c      EIGEN6=EIGMAX
c      EIGEN7=EIGMAX
c      EIGEN8=EIGMAX



c***************************************************************
c                                     u,v,w,  af>b>as>0 - speeds
c -Entropy correction must be here.

c****************************************************************
      aas=dmin1(cc,aas)
      alf=dsqrt(dabs(cc-aas)/(aaf-aas))
      als=dsqrt(dabs(aaf-cc)/(aaf-aas))
      cmas=cc-aas
      afmc=aaf-cc
      afmas=aaf-aas
              hyz=dsqrt(hy**2+hz**2)
                sih=-1.d0
                if(hx.ge.0.d0) sih=+1.d0
      hyy=hy/hyz
      hzz=hz/hyz
c****************************************************************
        f11=ru1
        f12=u1*ru1-        hx1*hx1*pi4+ p1+hh1
        f13=u1*rv1-        hx1*hy1*pi4
        f14=u1*rw1-        hx1*hz1*pi4
        f15=u1*(e1+p1+hh1)-hx1*(u1*hx1+v1*hy1+w1*hz1)*pi4
        f16=0.d0
        f17=u1*hy1-        hx1*v1
        f18=u1*hz1-        hx1*w1
           f21=ru2
           f22=u2*ru2-        hx2*hx2*pi4+ p2+hh2
           f23=u2*rv2-        hx2*hy2*pi4
           f24=u2*rw2-        hx2*hz2*pi4
           f25=u2*(e2+p2+hh2)-hx2*(u2*hx2+v2*hy2+w2*hz2)*pi4
           f26=0.d0
           f27=u2*hy2-        hx2*v2
           f28=u2*hz2-        hx2*w2
        du1=r1-r2
        du22=ru1-ru2
        du33=rv1-rv2
        du44=rw1-rw2
        du55=e1-e2
        du6=hx1-hx2
        du7=hy1-hy2
        du8=hz1-hz2
c--------------------------------------------------------------------
        du2=(-ua*du1+du22)/ra
        du3=(-va*du1+du33)/ra
        du4=(-wa*du1+du44)/ra
        du5=-bet*(-kk*du1+ua*du22+va*du33+wa*du44-du55+(hx*du6+
     +hy*du7+hz*du8)*pi4)
c---------------------------------------------------------S-matrix
      sp15=ra*alf
      sp16=ra*alf
      sp17=ra*als
      sp18=ra*als
      sp25=alf*af
      sp26=-alf*af
      sp27=als*as
      sp28=-als*as
      sp33=-hzz/dsqrt(2.d0)
      sp34=-hzz/dsqrt(2.d0)
      sp35=-als*as*hyy*sih
      sp36=als*as*hyy*sih
      sp37=alf*af*hyy*sih
      sp38=-alf*af*hyy*sih
      sp43=hyy/dsqrt(2.d0)
      sp44=hyy/dsqrt(2.d0)
      sp45=-als*as*hzz*sih
      sp46=als*as*hzz*sih
      sp47=alf*af*hzz*sih
      sp48=-alf*af*hzz*sih
      sp55=alf*ra*cc
      sp56=alf*ra*cc
      sp57=als*ra*cc
      sp58=als*ra*cc
      sp73=hzz*dsqrt(2.d0*pi*ra)*sih
      sp74=-hzz*dsqrt(2.d0*pi*ra)*sih
      sp75=2.d0*als*dsqrt(pi*ra)*c*hyy
      sp76=2.*als*dsqrt(pi*ra)*c*hyy
      sp77=-2.d0*alf*dsqrt(pi*ra)*c*hyy
      sp78=-2.d0*alf*dsqrt(pi*ra)*c*hyy
      sp83=-hyy*dsqrt(2.d0*pi*ra)*sih
      sp84=hyy*dsqrt(2.d0*pi*ra)*sih
      sp85=2.d0*als*dsqrt(pi*ra)*c*hzz
      sp86=2.d0*als*dsqrt(pi*ra)*c*hzz
      sp87=-2.d0*alf*dsqrt(pi*ra)*c*hzz
      sp88=-2.d0*alf*dsqrt(pi*ra)*c*hzz
      so15=-1.d0/cc
      so33=-hzz/dsqrt(2.d0)
      so34=hyy/dsqrt(2.d0)
      so37=.5d0*hzz*sih/dsqrt(2.d0*pi*ra)
      so38=-.5d0*hyy*sih/dsqrt(2.d0*pi*ra)
      so43=-hzz/dsqrt(2.d0)
      so44=hyy/dsqrt(2.d0)
      so47=-.5d0*hzz*sih/dsqrt(2.d0*pi*ra)
      so48=.5d0*hyy*sih/dsqrt(2.d0*pi*ra)
      so52=alf*af*.5d0/cc
      so53=-.5d0*als*as*hyy*sih/cc
      so54=-.5d0*als*as*hzz*sih/cc
      so55=alf*.5d0/(cc*ra)
      so57=.25d0*als*hyy/(c*dsqrt(pi*ra))
      so58=.25d0*als*hzz/(c*dsqrt(pi*ra))
      so62=-alf*af*.5/cc
      so63=.5d0*als*as*hyy*sih/cc
      so64=.5d0*als*as*hzz*sih/cc
      so65=alf*.5d0/(cc*ra)
      so67=.25d0*als*hyy/(c*dsqrt(pi*ra))
      so68=.25d0*als*hzz/(c*dsqrt(pi*ra))
      so72=.5d0*als*as/cc
      so73=.5d0*alf*af*hyy*sih/cc
      so74=.5d0*alf*af*hzz*sih/cc
      so75=als*.5d0/(ra*cc)
      so77=-.25d0*alf*hyy/(c*dsqrt(pi*ra))
      so78=-.25d0*alf*hzz/(c*dsqrt(pi*ra))
      so82=-.5d0*als*as/cc
      so83=-.5d0*alf*af*hyy*sih/cc
      so84=-.5d0*alf*af*hzz*sih/cc
      so85=als*.5d0/(ra*cc)
      so87=-.25d0*alf*hyy/(c*dsqrt(pi*ra))
      so88=-.25d0*alf*hzz/(c*dsqrt(pi*ra))
c**************************************************************
      qqqq1=eigen1*
     *(du1+so15*du5)
      qqqq2=eigen2*du6
      qqqq3=eigen3*
     *(so33*du3+so34*du4+so37*du7+so38*du8)
      qqqq4=eigen4*
     *(so43*du3+so44*du4+so47*du7+so48*du8)
      qqqq5=eigen5*
     *(so52*du2+so53*du3+so54*du4+so55*du5+so57*du7+so58*du8)
      qqqq6=eigen6*
     +(so62*du2+so63*du3+so64*du4+so65*du5+so67*du7+so68*du8)
      qqqq7=eigen7*
     *(so72*du2+so73*du3+so74*du4+so75*du5+so77*du7+so78*du8)
      qqqq8=eigen8*
     *(so82*du2+so83*du3+so84*du4+so85*du5+so87*du7+so88*du8)
      qqq1=qqqq1+sp15*qqqq5+sp16*qqqq6+sp17*qqqq7+sp18*qqqq8
      qqq2=sp25*qqqq5+sp26*qqqq6+sp27*qqqq7+sp28*qqqq8
      qqq3=sp33*qqqq3+
     +sp34*qqqq4+sp35*qqqq5+sp36*qqqq6+sp37*qqqq7+sp38*qqqq8
      qqq4=sp43*qqqq3+
     +sp44*qqqq4+sp45*qqqq5+sp46*qqqq6+sp47*qqqq7+sp48*qqqq8
      qqq5=sp55*qqqq5+sp56*qqqq6+sp57*qqqq7+sp58*qqqq8
      qqq6=qqqq2
      qqq7=sp73*qqqq3+
     +sp74*qqqq4+sp75*qqqq5+sp76*qqqq6+sp77*qqqq7+sp78*qqqq8
      qqq8=sp83*qqqq3+
     +sp84*qqqq4+sp85*qqqq5+sp86*qqqq6+sp87*qqqq7+sp88*qqqq8
c       call soldop(sol,spl,dul,eigenl,qqql)
       qq1=qqq1
       qq2=ua*qqq1+ra*qqq2
       qq3=va*qqq1+ra*qqq3
       qq4=wa*qqq1+ra*qqq4
       qq5=kk*qqq1+ra*(ua*qqq2+va*qqq3+wa*qqq4)+
     +qqq5/bet+pi4*(hx*qqq6+hy*qqq7+hz*qqq8)
       qq6=qqq6
       qq7=qqq7
       qq8=qqq8
c---------------------------------------------------------------
c        e0(l,nn,1)=0.5d0*(f11+f21+qq1)
c        flux2=0.5d0*(f12+f22+qq2)
c        flux3=0.5d0*(f13+f23+qq3)
c        flux4=0.5d0*(f14+f24+qq4)
c	  e0(l,nn,2)=flux2
c	  e0(l,nn,3)=flux4
c        e0(l,nn,4)=0.5d0*(f15+f25+qq5)
c       flux6=0.5d0*(f16+f26+qq6)
c       flux7=0.5d0*(f17+f27+qq7)
c        flux8=0.5d0*(f18+f28+qq8)
c        e0(l,nn,5)=flux6
c        e0(l,nn,6)=flux8
        
        
         Wgdnv(CHF_IX[i;j;k],iRho  )  = 0.5d0*(f11+f21+qq1)
         Wgdnv(CHF_IX[i;j;k],inorm )  = 0.5d0*(f12+f22+qq2)
         Wgdnv(CHF_IX[i;j;k],itan1 )  = 0.5d0*(f13+f23+qq3)
         Wgdnv(CHF_IX[i;j;k],itan2 )  = 0.5d0*(f14+f24+qq4)
         Wgdnv(CHF_IX[i;j;k],iPres )  = 0.5d0*(f15+f25+qq5)
         Wgdnv(CHF_IX[i;j;k],inormB)  = 0.5d0*(f16+f26+qq6)
         Wgdnv(CHF_IX[i;j;k],itanB1)  = 0.5d0*(f17+f27+qq7)
         Wgdnv(CHF_IX[i;j;k],itanB2)  = 0.5d0*(f18+f28+qq8)

          
          
        CHF_ENDDO          
        return  
        
        end  