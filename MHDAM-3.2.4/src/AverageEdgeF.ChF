#include "CONSTANTS.H"

c --------------------------------------------------------------
c  this subroutine averages edge-centered fine grid data onto
c  underlying coarse-grid edges in direction dir
c
c  INPUTS/OUTPUTS:
c  fine    => fine-grid data
c  coarse <=  coarse data
c  crseBox => face-centered coarse box over which to average
c  nRef    => refinement ratio
c  refBox  => utility box, goes from (0,nref-1) in all directions
c --------------------------------------------------------------
      subroutine AVERAGEEDGE( CHF_FRA[coarse],
     &                        CHF_CONST_FRA[fine],
     &                        CHF_BOX[crseBox],
     &                        CHF_CONST_INT[nRef],
     &                        CHF_CONST_REAL[dWeight],
     &                        CHF_BOX[refBox]         )

      integer CHF_DDECL[ic; jc; kc]
      integer CHF_DDECL[ifine; jfine; kfine]
      integer CHF_DDECL[ii; jj; kk]
      integer var
      REAL_T crseSum, ref_scale

      ref_scale = dWeight*(one/nRef)**(CH_SPACEDIM - 1)

      do var = 0, CHF_NCOMP[coarse] - 1

        CHF_MULTIDO[crseBox;ic;jc;kc]
          crseSum = zero

          CHF_DTERM[
          ifine=ic*nRef;
          jfine=jc*nRef;
          kfine=kc*nRef]

          CHF_MULTIDO[refBox;ii;jj;kk] 

            crseSum = crseSum + fine(CHF_IX[ifine+ii;jfine+jj;kfine+kk],var)

          CHF_ENDDO

          coarse(CHF_IX[ic;jc;kc],var) = ref_scale*crseSum
        CHF_ENDDO
      enddo

      return
      end

c --------------------------------------------------------------
c  this subroutine averages face-centered fine grid data onto
c  underlying coarse-grid edges in direction dir using harmonic 
c  averaging

c
c  INPUTS/OUTPUTS:
c  fine    => fine-grid data
c  coarse <=  coarse data
c  crseBox => face-centered coarse box over which to average
c  nRef    => refinement ratio
c  refBox  => utility box, goes from (0,nref-1) in all directions
c --------------------------------------------------------------
      subroutine AVERAGEEDGEHARMONIC( CHF_FRA[coarse],
     &                                CHF_CONST_FRA[fine],
     &                                CHF_BOX[crseBox], 
     &                                CHF_CONST_INT[nRef],
     &                                CHF_CONST_REAL[dWeight],
     &                                CHF_BOX[refBox]      )

      integer CHF_DDECL[ic; jc; kc]
      integer CHF_DDECL[ifine; jfine; kfine]
      integer CHF_DDECL[ii; jj; kk]
      integer var
      REAL_T crseSum, ref_scale

      ref_scale = dWeight*(one/nRef)**(CH_SPACEDIM - 1)

      do var = 0, CHF_NCOMP[coarse] - 1

        CHF_MULTIDO[crseBox;ic;jc;kc]
          crseSum = zero

          CHF_DTERM[
          ifine=ic*nRef;
          jfine=jc*nRef;
          kfine=kc*nRef]

          CHF_MULTIDO[refBox;ii;jj;kk] 

            crseSum = crseSum + one/fine(CHF_IX[ifine+ii;jfine+jj;kfine+kk],var)

          CHF_ENDDO

          coarse(CHF_IX[ic;jc;kc],var) = one/(ref_scale*crseSum)
        CHF_ENDDO
      enddo

      return
      end

      subroutine FineToCoarse( CHF_FRA[coarse],
     &                         CHF_CONST_FRA[fine],
     &                         CHF_BOX[crseBox], 
     &                         CHF_CONST_REAL[dWeight],
     &                         CHF_CONST_INT[nRef] )

      integer CHF_DDECL[ic; jc; kc]
      integer CHF_DDECL[ifine; jfine; kfine]
      integer var

      do var = 0, CHF_NCOMP[coarse] - 1

        CHF_MULTIDO[crseBox;ic;jc;kc]

          CHF_DTERM[
          ifine=ic*nRef;
          jfine=jc*nRef;
          kfine=kc*nRef]

          coarse(CHF_IX[ic;jc;kc],var) = dWeight*fine(CHF_IX[ifine;jfine;kfine],var)
        CHF_ENDDO
      enddo

      return
      end

