#include "CONSTANTS.H"
#include "LGintegrator.H"

        subroutine SETRIEMANN_MHDK(
     &    CHF_CONST_REAL[augamma],
     &    CHF_CONST_REAL[auXs],
     &    CHF_CONST_REAL[auNetnumL], 
     &    CHF_CONST_REAL[auNumdenL],         ! before the shock
     &    CHF_CONST_REAL[auTemperatureL],
     &    CHF_CONST_REAL[auVelxL],
     &    CHF_CONST_REAL[auVelyL],
     &    CHF_CONST_REAL[auBxL],    
     &    CHF_CONST_REAL[auByL],         
     &    CHF_CONST_REAL[auNumdenR],         ! after the shock
     &    CHF_CONST_REAL[auTemperatureR],
     &    CHF_CONST_REAL[auVelxR],
     &    CHF_CONST_REAL[auVelyR],
     &    CHF_CONST_REAL[auBxR],    
     &    CHF_CONST_REAL[auByR])

#include "RiemannCommon.fh"
#include "EosCommon.fh"

        real_t r0, p0, umag, p, pref
        real_t pgamma, M2

        startX     = auXs

        gamma      = augamma
        hgamma     = gamma - one
        invhgamma  = one / hgamma
        pgamma     = gamma + one

c        numdenL    = auNumdenL
        temperatureL = auTemperatureL
                        
        
        ref_N      = auNumdenL
        ref_V      = sqrt( auVelxL*auVelxL + auVelyL*auVelyL)

        densityL   = auNumdenL*eos_mp
        pref       = densityL*ref_V*ref_V
        p          = two*eos_k*auNumdenL*temperatureL

        densityL   = one
        pressureL  = p/pref
        machL      = one/sqrt( gamma*pressureL/densityL )
        BxL        = auBxL/sqrt( pref )
        ByL        = auByL/sqrt( pref )
        BzL        = zero
        velxL      = auVelxL/ref_V
        velyL      = auVelyL/ref_V
        velzL      = zero
        
        M2         = machL*machL
                
        
c Borovikovs MHD shock relations        
c        densityR   = (densityL*densityL*(one + gamma)*velxL*velxL)
c     &              /(two*gamma*pressureL+velxL*velxL*densityL*gamma
c     &                            -velxL*velxL*densityL)
     
c        velxR = (two*gamma*pressureL+velxL*velxL*densityL*gamma
c     &          -velxL*velxL*densityL)/((one+gamma)*densityL*velxL)
        
c        pressureR = (pressureL-gamma*pressureL
c     &   +two*velxL*velxL*densityL)
c     &             /(1+gamma)
c        BxR        = BxL
                  
c Kryukovs MHD shock relations                       
c        pressureR  = (two - hgamma*pressureL)/pgamma
c        densityR   = pgamma*M2/(hgamma*M2 + two)
c        velxR      = one/densityR
        
c Uniform flow     
c        densityR   = densityL
c        pressureR  = pressureL
c        velxR      = velxL

        densityR   = auNumdenR/ref_N
        pressureR  = two*eos_k*aunumdenR*autemperatureR/pref        
        BxR        = auBxR/sqrt( pref )
        ByR        = auByR/sqrt( pref )
        BzR        = zero
        velxR      = auVelxR/ref_V
        velyR      = auVelyR/ref_V        
        velzR      = zero
        
        
        r0         = min( densityL,  densityR  )
        p0         = min( pressureL, pressureR )

        umag       = sqrt(gamma*p0/r0)

        smallr     = small*r0
        smallu     = small*umag
        smallp     = small*r0*half*umag*umag

        return
        end

        subroutine RIEMANNINIT_MHDK(
     &    CHF_FRA[U],
     &    CHF_CONST_REAL[dx],
     &    CHF_BOX[box])

        integer CHF_DDECL[i;j;k]
        real_t  CHF_DDECL[x;y;z]
        real_t  ke, b, eL, eR, vxL, vyL, vzL

#include "RiemannCommon.fh"
#include "EosCommon.fh"

        vxL  = one
        vyL  = zero
        vzL  = zero

        b    = d_1_4PI*(BxL*BxL + ByL*ByL + BzL*BzL  )
        ke   =          vxL*vxL + vyL*vyL + vzL*vzL

        eL   = pressureL/hgamma + half*(densityL*ke + b)

        b    = d_1_4PI*(BxR  *BxR   + ByR  *ByR   + BzR  *BzR  )
        ke   =          velxR*velxR + velyR*velyR + velzR*velzR

        eR   = pressureR/hgamma + half*(densityR*ke + b)

        CHF_MULTIDO[box;i;j;k]
          CHF_DTERM[
          x = (i + half)*dx;
          y = (j + half)*dx;
          z = (k + half)*dx]

          if( x < startX ) then
            U(CHF_IX[i;j;k],URHO)  = densityL

            U(CHF_IX[i;j;k],UMOMX) = densityL*vxL
            U(CHF_IX[i;j;k],UMOMY) = densityL*vyL
            U(CHF_IX[i;j;k],UMOMZ) = densityL*vzL

            U(CHF_IX[i;j;k],UENG)  = eL

            U(CHF_IX[i;j;k],UBX )  = BxL
            U(CHF_IX[i;j;k],UBY )  = ByL
            U(CHF_IX[i;j;k],UBZ )  = BzL
          else
            U(CHF_IX[i;j;k],URHO)  = densityR

            U(CHF_IX[i;j;k],UMOMX) = densityR*velxR
            U(CHF_IX[i;j;k],UMOMY) = densityR*velyR
            U(CHF_IX[i;j;k],UMOMZ) = densityR*velzR

            U(CHF_IX[i;j;k],UENG)  = eR

            U(CHF_IX[i;j;k],UBX )  = BxR
            U(CHF_IX[i;j;k],UBY )  = ByR
            U(CHF_IX[i;j;k],UBZ )  = BzR
          endif

          
        CHF_ENDDO

        return
        end

        subroutine FLUXBC_MHDK(
     &    CHF_FRA[F],
     &    CHF_CONST_FRA[W],
     &    CHF_CONST_INT[lohisign],
     &    CHF_CONST_REAL[dx],
     &    CHF_CONST_INT[dir],
     &    CHF_BOX[box])

        real_t P, b, bu, ke, e, density, velx, vely, velz
        real_t pressure, vxL, vyL, vzL, Bx, By, Bz
        integer CHF_DDECL[i;j;k]

#include "RiemannCommon.fh"
#include "EosCommon.fh"

        vxL  = one
        vyL  = zero
        vzL  = zero

        CHF_MULTIDO[box;i;j;k]
          if( lohisign == 1 ) then
            density  = W(CHF_IX[i;j;k],WRHO )

            velx     = W(CHF_IX[i;j;k],WVELX)
            vely     = W(CHF_IX[i;j;k],WVELY)
            velz     = W(CHF_IX[i;j;k],WVELZ)

            pressure = W(CHF_IX[i;j;k],WPRES)

            Bx       = W(CHF_IX[i;j;k],WBX  )
            By       = W(CHF_IX[i;j;k],WBY  )
            Bz       = W(CHF_IX[i;j;k],WBZ  )

            b        = d_1_8PI*(Bx  *Bx   + By  *By   + Bz  *Bz  )
            ke       = density*(velx*velx + vely*vely + velz*velz)
            bu       =          Bx  *velx + By  *vely + Bz  *velz

            P        = pressure + b
            e        = pressure/hgamma + half*ke + b 

            F(CHF_IX[i;j;k],URHO ) = density*velx

            F(CHF_IX[i;j;k],UMOMX) = density*velx*velx - d_1_4PI*Bx*Bx + P
            F(CHF_IX[i;j;k],UMOMY) = density*velx*vely - d_1_4PI*Bx*By
            F(CHF_IX[i;j;k],UMOMZ) = density*velx*velz - d_1_4PI*Bx*Bz

            F(CHF_IX[i;j;k],UENG ) = velx*(e + P) - d_1_4PI*Bx*bu

            F(CHF_IX[i;j;k],UBX)   = zero
            F(CHF_IX[i;j;k],UBY)   = velx*By - vely*Bx
            F(CHF_IX[i;j;k],UBZ)   = velx*Bz - velz*Bx
            
            
          else
            b    = d_1_8PI *(BxL*BxL + ByL*ByL + BzL*BzL  )
            ke   = densityL*(vxL*vxL + vyL*vyL + vzL*vzL)
            bu   =           BxL*vxL + ByL*vyL + BzL*vzL

            P    = pressureL + b
            e    = pressureL/hgamma + half*ke + b 

            F(CHF_IX[i;j;k],URHO ) = densityL*vxL

            F(CHF_IX[i;j;k],UMOMX) = densityL*vxL*vxL - d_1_4PI*BxL*BxL + p
            F(CHF_IX[i;j;k],UMOMY) = densityL*vxL*vyL - d_1_4PI*BxL*ByL
            F(CHF_IX[i;j;k],UMOMZ) = densityL*vxL*vzL - d_1_4PI*BxL*BzL

            F(CHF_IX[i;j;k],UENG ) = vxL*(e + P) - d_1_4PI*BxL*bu

            F(CHF_IX[i;j;k],UBX)   = zero
            F(CHF_IX[i;j;k],UBY)   = vxL*ByL - vyL*BxL
            F(CHF_IX[i;j;k],UBZ)   = vxL*BzL - vzL*BxL
        
          endif
        CHF_ENDDO

        return
        end
