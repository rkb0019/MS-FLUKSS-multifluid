#include "CONSTANTS.H"
#include "LGintegrator.H"        

        subroutine CHARGE_EXCHANGE_4FPI(
     &    CHF_FRA[S],
     &    CHF_CONST_FRA[W],
     &    CHF_CONST_FIA1[REG],
     &    CHF_CONST_REAL[dt],
     &    CHF_CONST_INT[iRhoN],
     &    CHF_CONST_INT[iRhoPIU],
     &    CHF_CONST_INT[iRhoPIW],
     &    CHF_BOX[box])

        integer CHF_DDECL[i;j;k]


        real_t rho,  ux,  uy,  uz,  p, U2, VVTP
        real_t bx, by, bz, fD, VA
        real_t HPturb1, HPturb2, HPturb1I, HPturb2I
        real_t rho1, ux1, uy1, uz1, p1, VVTH1, VVTHU1
        real_t rho2, ux2, uy2, uz2, p2, VVTH2, VVTHU2
        real_t rho3, ux3, uy3, uz3, p3, VVTH3, VVTHU3
        real_t rhoI, pI, rhoS, pS, VVTI
        real_t UD1I, UIM1, UHM1I, UIE1, UHE1I
        real_t UD2I, UIM2, UHM2I, UIE2, UHE2I
        real_t UD3I, UIM3, UHM3I, UIE3, UHE3I
        real_t UH21, DU21, VPHH1, VPHP1, UD1, UPM1, UHM1, UPE1, UHE1
        real_t UH22, DU22, VPHH2, VPHP2, UD2, UPM2, UHM2, UPE2, UHE2
        real_t UH23, DU23, VPHH3, VPHP3, UD3, UPM3, UHM3, UPE3, UHE3
        real_t SIGMAL1, ARR1, DENPLU1, h21, h31, h41, h51
        real_t SIGMAL2, ARR2, DENPLU2, h22, h32, h42, h52
        real_t SIGMAL3, ARR3, DENPLU3, h23, h33, h43, h53
        real_t SIGMAL1I, ARR1I, DENPLU1I, h21I, h31I, h41I, h51I
        real_t SIGMAL2I, ARR2I, DENPLU2I, h22I, h32I, h42I, h52I
        real_t SIGMAL3I, ARR3I, DENPLU3I, h23I, h33I, h43I, h53I
        real_t H1, H2, H3, H4, H5, ENMI, ENPLU
        real_t PPLU1, PPLU2, PPLU3, PMI1, PMI2, PMI3
        real_t PPLU1I, PPLU2I, PPLU3I, PMI1I, PMI2I, PMI3I
        real_t IR, HP, ENMII, ENPLUI
        real_t HpP1, HpP2, HpP3
        real_t Hp1I, Hp2I, Hp3I, HpI1, HpI2, HpI3

        integer iWVELX1,iWVELY1,iWVELZ1,iWPRES1
        integer iUMOMX1,iUMOMY1,iUMOMZ1,iUENG1
        integer iWRHO2,iWVELX2,iWVELY2,iWVELZ2,iWPRES2
        integer iURHO2,iUMOMX2,iUMOMY2,iUMOMZ2,iUENG2
        integer iWRHO3,iWVELX3,iWVELY3,iWVELZ3,iWPRES3
        integer iURHO3,iUMOMX3,iUMOMY3,iUMOMZ3,iUENG3

        integer iPRESPIW, iPRESPIU
        real_t UDS


        real_t region, sp, sn_I, sp_I, sn_H1, sp_H1, sn_H2, sp_H2,sn_H3, sp_H3
        real_t ff1, ff2, sVT, sVT_I, sVT_S, sp_S, sVT_H1, sVT_H2, sVT_H3

#include "EosCommon.fh"
#include "ChargeExchange.fh"

        iWVELX1 = iRhoN + WVELX
        iWVELY1 = iRhoN + WVELY
        iWVELZ1 = iRhoN + WVELZ
        iWPRES1 = iRhoN + WPRES
        iUMOMX1 = iRhoN + UMOMX
        iUMOMY1 = iRhoN + UMOMY
        iUMOMZ1 = iRhoN + UMOMZ
        iUENG1  = iRhoN + UENG

        iWRHO2  = iRhoN  + WNUM_E
        iWVELX2 = iWRHO2 + WVELX
        iWVELY2 = iWRHO2 + WVELY
        iWVELZ2 = iWRHO2 + WVELZ
        iWPRES2 = iWRHO2 + WPRES
        iURHO2  = iRhoN  + WNUM_E
        iUMOMX2 = iURHO2 + UMOMX
        iUMOMY2 = iURHO2 + UMOMY
        iUMOMZ2 = iURHO2 + UMOMZ
        iUENG2  = iURHO2 + UENG
        
        iWRHO3 = iRhoN  + 2*WNUM_E
        iWVELX3 = iWRHO3 + WVELX
        iWVELY3 = iWRHO3 + WVELY
        iWVELZ3 = iWRHO3 + WVELZ
        iWPRES3 = iWRHO3 + WPRES
        iURHO3  = iRhoN  + 2*WNUM_E
        iUMOMX3 = iURHO3 + UMOMX
        iUMOMY3 = iURHO3 + UMOMY
        iUMOMZ3 = iURHO3 + UMOMZ
        iUENG3  = iURHO3 + UENG

        iPRESPIW = iRhoPIW + 1
        iPRESPIU = iRhoPIU + 1

        CHF_MULTIDO[box;i;j;k]
          rho    = W(CHF_IX[i;j;k],WRHO)

          ux     = W(CHF_IX[i;j;k],WVELX)
          uy     = W(CHF_IX[i;j;k],WVELY)
          uz     = W(CHF_IX[i;j;k],WVELZ)

          p      = W(CHF_IX[i;j;k],WPRES)

          U2     = ux*ux + uy*uy + uz*uz

          rhoI   = W(CHF_IX[i;j;k],iRhoPIW)
          pI     = W(CHF_IX[i;j;k],iPresPIW)


          if (W(CHF_IX[i;j;k],iRhoPIW) < 0.0D0) then
!                  print *, "rhoI < 0"
                  rhoI= 1e-13
          endif
          if (W(CHF_IX[i;j;k],iPresPIW) < 0.0D0) then
!                  print *, "pI < 0"
                  pI = smallP/10
          endif


          rhoS   = rho - rhoI
!          pS     = max( p - pI, two*smallp )
!          pS     = max( 0.5D0*p - pI, two*smallp )

!          VVTP   =       pS / rhoS
!          VVTP   = 2.0D0*pS / rhoS
          VVTI   = 2.0D0*pI/rhoI
!          if (VVTI .le. zero) then
!            print *, "VVTI = ",VVTI," at ",i,j,k
!          endif
!without superthermal electrons (newVVTP doesn't include superthermal electrons)
          VVTP   = (2.0D0*p/rho-VVTI*rhoI/rho)/(2.0D0-rhoI/rho)
!for superthermal electrons
!          VVTP   = (p-2*pI)/(rho-rhoI) !default
          if (VVTP .le. zero) then
!            print *, "VVTP = ",VVTP," at ",i,j,k
            VVTP = zero
          endif

!Federico: compute VA for PUI energy transfer 
          
          bx = W(CHF_IX[i;j;k],WBX)
          by = W(CHF_IX[i;j;k],WBY)
          bz = W(CHF_IX[i;j;k],WBZ)

          VA = sqrt(bx**2+by**2+bz**2)/sqrt(d_4PI*rho)

          fD = 0.25  !Breech 2008


!-------------------------------------------------------------------------------
!                                                                charge exchange
!-------------------------------------------------------------------------------
!                                                                     NEUTRALS 1
          rho1   = W(CHF_IX[i;j;k],iRhoN)

          ux1    = W(CHF_IX[i;j;k],iWVELX1)
          uy1    = W(CHF_IX[i;j;k],iWVELY1)
          uz1    = W(CHF_IX[i;j;k],iWVELZ1)

          p1     = W(CHF_IX[i;j;k],iWPRES1)

          UH21   = ux1*ux1 + uy1*uy1 + uz1*uz1

          DU21   = (ux-ux1)**2  + (uy-uy1)**2  + (uz-uz1)**2
          VPHH1  = (ux-ux1)*ux1 + (uy-uy1)*uy1 + (uz-uz1)*uz1
          VPHP1  = (ux-ux1)*ux  + (uy-uy1)*uy  + (uz-uz1)*uz

          
          VVTH1  = 2.0D0*p1/rho1

          UD1    = sqrt( 4.0*(VVTP+VVTH1)/d_PI + DU21)
          UPM1   = sqrt( 16.0*VVTP/d_PI  + 2.25*d_PI*VVTH1  + 4.0*DU21)
          UHM1   = sqrt( 2.25*d_PI*VVTP  + 16.0*VVTH1/d_PI  + 4.0*DU21)
          UPE1   = sqrt((4.0*VVTP        + 64.0*VVTH1/9.0)/d_PI + DU21)
          UHE1   = sqrt((64.0*VVTP/9.0   + 4.0*VVTH1     )/d_PI + DU21)

!          SIGMAL1  = 2.1 - 0.092*log( ce_scaleVel*UD1 )
!          SIGMAL1  = ce_scaleSigmaFite*SIGMAL1*SIGMAL1
          
          UDS   = ce_scaleVel*UD1
          if (UDS .le. 8.0D7) then
            SIGMAL1  = ((13.493 - 0.531*log(UDS))**2)
            SIGMAL1  = ce_scaleSigmaLindsay*SIGMAL1
          else
            SIGMAL1  = ((13.493 - 0.531*log(UDS))**2)*(one - exp(-2.946D+9/UDS))**4.5
            SIGMAL1  = ce_scaleSigmaLindsay*SIGMAL1
          endif

          UD1I   = sqrt( 4.0*(VVTI+VVTH1)/d_PI + DU21)
          UIM1   = sqrt( 16.0*VVTI/d_PI  + 2.25*d_PI*VVTH1  + 4.0*DU21)
          UHM1I  = sqrt( 2.25*d_PI*VVTI  + 16.0*VVTH1/d_PI  + 4.0*DU21)
          UIE1   = sqrt((4.0*VVTI        + 64.0*VVTH1/9.0)/d_PI + DU21)
          UHE1I  = sqrt((64.0*VVTI/9.0   + 4.0*VVTH1     )/d_PI + DU21)  
          
!          SIGMAL1I  = 2.1 - 0.092*log( ce_scaleVel*UD1I )
!          SIGMAL1I  = ce_scaleSigmaFite*SIGMAL1I*SIGMAL1I

          UDS   = ce_scaleVel*UD1I
          if (UDS .le. 8.0D7) then
            SIGMAL1I  = ((13.493 - 0.531*log(UDS))**2)
            SIGMAL1I  = ce_scaleSigmaLindsay*SIGMAL1I
          else
            SIGMAL1I  = ((13.493 - 0.531*log(UDS))**2)*(one - exp(-2.946D+9/UDS))**4.5
            SIGMAL1I  = ce_scaleSigmaLindsay*SIGMAL1I
          endif
         
!                                                                     NEUTRALS 2
          rho2   = W(CHF_IX[i;j;k],iWRHO2)

          ux2    = W(CHF_IX[i;j;k],iWVELX2)
          uy2    = W(CHF_IX[i;j;k],iWVELY2)
          uz2    = W(CHF_IX[i;j;k],iWVELZ2)

          p2     = W(CHF_IX[i;j;k],iWPRES2)

          UH22   = ux2**2 + uy2**2 + uz2**2

          DU22   = (ux-ux2)**2  + (uy-uy2)**2  + (uz-uz2)**2
          VPHH2  = (ux-ux2)*ux2 + (uy-uy2)*uy2 + (uz-uz2)*uz2
          VPHP2  = (ux-ux2)*ux  + (uy-uy2)*uy  + (uz-uz2)*uz
    
          VVTH2  = 2.0*p2/rho2

          UD2    = sqrt( 4.0*(VVTP + VVTH2)/d_PI + DU22)
          UPM2   = sqrt( 16.0*VVTP/d_PI  + 2.25*d_PI*VVTH2  + 4.0*DU22)
          UHM2   = sqrt( 2.25*d_PI*VVTP  + 16.0*VVTH2/d_PI  + 4.0*DU22)
          UPE2   = sqrt((4.0*VVTP        + 64.0*VVTH2/9.0)/d_PI + DU22)
          UHE2   = sqrt((64.0*VVTP/9.0   + 4.0*VVTH2     )/d_PI + DU22)

!          SIGMAL2  = 2.1 - 0.092*log( ce_scaleVel*UD2 )
!          SIGMAL2  = ce_scaleSigmaFite*SIGMAL2*SIGMAL2

          UDS   = ce_scaleVel*UD2
          if (UDS .le. 8.0D7) then
            SIGMAL2  = ((13.493 - 0.531*log(UDS))**2)
            SIGMAL2  = ce_scaleSigmaLindsay*SIGMAL2
          else
            SIGMAL2  = ((13.493 - 0.531*log(UDS))**2)*(one - exp(-2.946D+9/UDS))**4.5
            SIGMAL2  = ce_scaleSigmaLindsay*SIGMAL2
          endif

          UD2I   = sqrt( 4.0*(VVTI+VVTH2)/d_PI + DU22)
          UIM2   = sqrt( 16.0*VVTI/d_PI  + 2.25*d_PI*VVTH2  + 4.0*DU22)
          UHM2I  = sqrt( 2.25*d_PI*VVTI  + 16.0*VVTH2/d_PI  + 4.0*DU22)
          UIE2   = sqrt((4.0*VVTI        + 64.0*VVTH2/9.0)/d_PI + DU22)
          UHE2I  = sqrt((64.0*VVTI/9.0   + 4.0*VVTH2     )/d_PI + DU22)

!          SIGMAL2I  = 2.1 - 0.092*log( ce_scaleVel*UD2I )
!          SIGMAL2I  = ce_scaleSigmaFite*SIGMAL2I*SIGMAL2I

          UDS   = ce_scaleVel*UD2I
          if (UDS .le. 8.0D7) then
            SIGMAL2I  = ((13.493 - 0.531*log(UDS))**2)
            SIGMAL2I  = ce_scaleSigmaLindsay*SIGMAL2I
          else
            SIGMAL2I  = ((13.493 - 0.531*log(UDS))**2)*(one - exp(-2.946D+9/UDS))**4.5
            SIGMAL2I  = ce_scaleSigmaLindsay*SIGMAL2I
          endif

!                                                                     NEUTRALS 3
          rho3   = W(CHF_IX[i;j;k],iWRHO3)

          ux3    = W(CHF_IX[i;j;k],iWVELX3)
          uy3    = W(CHF_IX[i;j;k],iWVELY3)
          uz3    = W(CHF_IX[i;j;k],iWVELZ3)

          p3     = W(CHF_IX[i;j;k],iWPRES3)

          UH23   = ux3**2 + uy3**2 + uz3**2

          DU23   = (ux-ux3)**2  + (uy-uy3)**2  + (uz-uz3)**2
          VPHH3  = (ux-ux3)*ux3 + (uy-uy3)*uy3 + (uz-uz3)*uz3
          VPHP3  = (ux-ux3)*ux  + (uy-uy3)*uy  + (uz-uz3)*uz

          VVTH3  = 2.0*p3/rho3

          UD3    = sqrt( 4.0*(VVTP + VVTH3)/d_PI + DU23)
          UPM3   = sqrt( 16.0*VVTP/d_PI  + 2.25*d_PI*VVTH3  + 4.0*DU23)
          UHM3   = sqrt( 2.25*d_PI*VVTP  + 16.0*VVTH3/d_PI  + 4.0*DU23)
          UPE3   = sqrt((4.0*VVTP        + 64.0*VVTH3/9.0)/d_PI + DU23)
          UHE3   = sqrt((64.0*VVTP/9.0   + 4.0*VVTH3     )/d_PI + DU23)

!          SIGMAL3  = 2.1 - 0.092*log( ce_scaleVel*UD3 )
!          SIGMAL3  = ce_scaleSigmaFite*SIGMAL3*SIGMAL3

          UDS   = ce_scaleVel*UD3
          if (UDS .le. 8.0D7) then
            SIGMAL3  = ((13.493 - 0.531*log(UDS))**2)
            SIGMAL3  = ce_scaleSigmaLindsay*SIGMAL3
          else
            SIGMAL3  = ((13.493 - 0.531*log(UDS))**2)*(one - exp(-2.946D+9/UDS))**4.5
            SIGMAL3  = ce_scaleSigmaLindsay*SIGMAL3
          endif

          UD3I   = sqrt( 4.0*(VVTI+VVTH3)/d_PI + DU23)
          UIM3   = sqrt( 16.0*VVTI/d_PI  + 2.25*d_PI*VVTH3  + 4.0*DU23)
          UHM3I  = sqrt( 2.25*d_PI*VVTI  + 16.0*VVTH3/d_PI  + 4.0*DU23)
          UIE3   = sqrt((4.0*VVTI        + 64.0*VVTH3/9.0)/d_PI + DU23)
          UHE3I  = sqrt((64.0*VVTI/9.0   + 4.0*VVTH3     )/d_PI + DU23)

!          SIGMAL3I  = 2.1 - 0.092*log( ce_scaleVel*UD3I )
!          SIGMAL3I  = ce_scaleSigmaFite*SIGMAL3I*SIGMAL3I

          UDS   = ce_scaleVel*UD3I
          if (UDS .le. 8.0D7) then
            SIGMAL3I  = ((13.493 - 0.531*log(UDS))**2)
            SIGMAL3I  = ce_scaleSigmaLindsay*SIGMAL3I
          else
            SIGMAL3I  = ((13.493 - 0.531*log(UDS))**2)*(one - exp(-2.946D+9/UDS))**4.5
            SIGMAL3I  = ce_scaleSigmaLindsay*SIGMAL3I
          endif

!                                                                   Pauls & Zank
          ARR1   = SIGMAL1*rho1*rhoS
          ARR2   = SIGMAL2*rho2*rhoS
          ARR3   = SIGMAL3*rho3*rhoS

          ARR1I  = SIGMAL1I*rho1*rhoI
          ARR2I  = SIGMAL2I*rho2*rhoI
          ARR3I  = SIGMAL3I*rho3*rhoI

          VVTHU1 = VVTH1/upm1
          VVTHU2 = VVTH2/upm2
          VVTHU3 = VVTH3/upm3

          HpP1   = ARR1*(0.75*VVTH1*UPE1+DU21*(0.5*UD1+VVTHU1)) !- 0.05*ARR1*(0.5*UH21*UD1 - VPHH1*VVTHU1 + 0.75*VVTH1*UPE1)
          HpP2   = ARR2*(0.75*VVTH2*UPE2+DU22*(0.5*UD2+VVTHU2)) !- 0.05*ARR2*(0.5*UH22*UD2 - VPHH2*VVTHU2 + 0.75*VVTH2*UPE2)
          HpP3   = ARR3*(0.75*VVTH3*UPE3+DU23*(0.5*UD3+VVTHU3))

          HpI1   = ARR1I*(0.75*VVTH1*UIE1+DU21*(0.5*UD1I+VVTH1/UIM1)) !- 0.05*ARR1I*(0.5*UH21*UD1I - VPHH1*VVTH1/UIM1 + 0.75*VVTH1*UIE1)
          HpI2   = ARR2I*(0.75*VVTH2*UIE2+DU22*(0.5*UD2I+VVTH2/UIM2)) !- 0.05*ARR2I*(0.5*UH22*UD2I - VPHH2*VVTH2/UIM2 + 0.75*VVTH2*UIE2)
          HpI3   = ARR3I*(0.75*VVTH3*UIE3+DU23*(0.5*UD3I+VVTH3/UIM3))

          Hp1I   = ARR1I*0.75*VVTI*UHE1I !+ 0.05*ARR1I*(0.5*U2*UD1I + VVTI*(VPHP1/UHM1I + 0.75*UHE1I))
          Hp2I   = ARR2I*0.75*VVTI*UHE2I !+ 0.05*ARR2I*(0.5*U2*UD2I + VVTI*(VPHP2/UHM2I + 0.75*UHE2I))
          Hp3I   = ARR3I*0.75*VVTI*UHE3I !+ 0.05*ARR3I*(0.5*U2*UD3I + VVTI*(VPHP3/UHM3I + 0.75*UHE3I))

          h21    = ARR1*(ux-ux1)*(UD1 + VVTHU1 + VVTP/UHM1)
          h31    = ARR1*(uy-uy1)*(UD1 + VVTHU1 + VVTP/UHM1)
          h41    = ARR1*(uz-uz1)*(UD1 + VVTHU1 + VVTP/UHM1)

          h21I   = ARR1I*(ux-ux1)*(UD1I + VVTH1/UIM1 + VVTI/UHM1I)
          h31I   = ARR1I*(uy-uy1)*(UD1I + VVTH1/UIM1 + VVTI/UHM1I)
          h41I   = ARR1I*(uz-uz1)*(UD1I + VVTH1/UIM1 + VVTI/UHM1I)

          h51    = 0.5*ARR1*(1.5*(UHE1*VVTP - UPE1*VVTH1)+
     &             UD1*(u2-uh21) + 2.0*(VVTHU1*VPHH1 + VVTP*VPHP1/UHM1))

          h51I   = 0.5*ARR1I*(1.5*(UHE1I*VVTI - UIE1*VVTH1)+
     &             UD1I*(u2-uh21) + 2.0*(VVTH1/UIM1*VPHH1 + VVTI*VPHP1/UHM1I)) 

          h22    = h21 + ARR2*(ux-ux2)*(UD2 + VVTHU2 + VVTP/UHM2)
          h32    = h31 + ARR2*(uy-uy2)*(UD2 + VVTHU2 + VVTP/UHM2)
          h42    = h41 + ARR2*(uz-uz2)*(UD2 + VVTHU2 + VVTP/UHM2)

          h22I   = h21I + ARR2I*(ux-ux2)*(UD2I + VVTH2/UIM2 + VVTI/UHM2I)
          h32I   = h31I + ARR2I*(uy-uy2)*(UD2I + VVTH2/UIM2 + VVTI/UHM2I)
          h42I   = h41I + ARR2I*(uz-uz2)*(UD2I + VVTH2/UIM2 + VVTI/UHM2I)

          h52    = h51 + 0.5*ARR2*(1.5*(UHE2*VVTP - UPE2*VVTH2)+
     &             UD2*(u2-uh22) + 2.0*(VVTHU2*VPHH2 + VVTP*VPHP2/UHM2))

          h52I   = h51I + 0.5*ARR2I*(1.5*(UHE2I*VVTI - UIE2*VVTH2)+
     &             UD2I*(u2-uh22) + 2.0*(VVTH2/UIM2*VPHH2 + VVTI*VPHP2/UHM2I))

          h23    = h22 + ARR3*(ux-ux3)*(UD3 + VVTHU3 + VVTP/UHM3)
          h33    = h32 + ARR3*(uy-uy3)*(UD3 + VVTHU3 + VVTP/UHM3)
          h43    = h42 + ARR3*(uz-uz3)*(UD3 + VVTHU3 + VVTP/UHM3)

          h23I   = h22I + ARR3I*(ux-ux3)*(UD3I + VVTH3/UIM3 + VVTI/UHM3I)
          h33I   = h32I + ARR3I*(uy-uy3)*(UD3I + VVTH3/UIM3 + VVTI/UHM3I)
          h43I   = h42I + ARR3I*(uz-uz3)*(UD3I + VVTH3/UIM3 + VVTI/UHM3I)

          h53    = h52 + 0.5*ARR3*(1.5*(UHE3*VVTP - UPE3*VVTH3)+
     &             UD3*(u2-uh23) + 2.0*(VVTHU3*VPHH3 + VVTP*VPHP3/UHM3))

          h53I   = h52I + 0.5*ARR3I*(1.5*(UHE3I*VVTI - UIE3*VVTH3)+
     &             UD3I*(u2-uh23) + 2.0*(VVTH3/UIM3*VPHH3 + VVTI*VPHP3/UHM3I))




          S(CHF_IX[i;j;k],URHO ) = zero

          S(CHF_IX[i;j;k],UBX  ) = zero
          S(CHF_IX[i;j;k],UBY  ) = zero
          S(CHF_IX[i;j;k],UBZ  ) = zero
          
!           S(CHF_IX[i;j;k],UMOMX) =-dt*h23
!           S(CHF_IX[i;j;k],UMOMY) =-dt*h33
!           S(CHF_IX[i;j;k],UMOMZ) =-dt*h43

!           S(CHF_IX[i;j;k],UENG ) =-dt*h53
!                                                                   Pauls & Zank
!         HdPH for each population of neutrals - always negative
          DENPLU1  =-ARR1*UD1
          DENPLU2  =-ARR2*UD2
          DENPLU3  =-ARR3*UD3

          DENPLU1I  =-ARR1I*UD1I
          DENPLU2I  =-ARR2I*UD2I
          DENPLU3I  =-ARR3I*UD3I

!         HmHP for neutrals everywhere - term in sum
          PPLU1  =-ARR1*(ux*UD1 - (ux1-ux)*VVTP/UHM1)
     &            -ARR2*(ux*UD2 - (ux2-ux)*VVTP/UHM2)
     &            -ARR3*(ux*UD3 - (ux3-ux)*VVTP/UHM3)

          PPLU2  =-ARR1*(uy*UD1 - (uy1-uy)*VVTP/UHM1)
     &            -ARR2*(uy*UD2 - (uy2-uy)*VVTP/UHM2)
     &            -ARR3*(uy*UD3 - (uy3-uy)*VVTP/UHM3)

          PPLU3  =-ARR1*(uz*UD1 - (uz1-uz)*VVTP/UHM1)
     &            -ARR2*(uz*UD2 - (uz2-uz)*VVTP/UHM2)
     &            -ARR3*(uz*UD3 - (uz3-uz)*VVTP/UHM3)
!         HmHI for neutrals everywhere - term in sum
          PPLU1I  =-ARR1I*(ux*UD1I - (ux1-ux)*VVTI/UHM1I)
     &            -ARR2I*(ux*UD2I - (ux2-ux)*VVTI/UHM2I)
     &            -ARR3I*(ux*UD3I - (ux3-ux)*VVTI/UHM3I)

          PPLU2I  =-ARR1I*(uy*UD1I - (uy1-uy)*VVTI/UHM1I)
     &            -ARR2I*(uy*UD2I - (uy2-uy)*VVTI/UHM2I)
     &            -ARR3I*(uy*UD3I - (uy3-uy)*VVTI/UHM3I)

          PPLU3I  =-ARR1I*(uz*UD1I - (uz1-uz)*VVTI/UHM1I)
     &            -ARR2I*(uz*UD2I - (uz2-uz)*VVTI/UHM2I)
     &            -ARR3I*(uz*UD3I - (uz3-uz)*VVTI/UHM3I)
!         HmPH for pop 1 - term outside sum
          PMI1   = ARR1*(ux1*UD1 + (ux1-ux)*VVTHU1)
          PMI2   = ARR1*(uy1*UD1 + (uy1-uy)*VVTHU1)
          PMI3   = ARR1*(uz1*UD1 + (uz1-uz)*VVTHU1)
!         HmIH for pop 1 - term outside sum
          PMI1I   = ARR1I*(ux1*UD1I + (ux1-ux)*VVTH1/UIM1)
          PMI2I   = ARR1I*(uy1*UD1I + (uy1-uy)*VVTH1/UIM1)
          PMI3I   = ARR1I*(uz1*UD1I + (uz1-uz)*VVTH1/UIM1)

          ENPLU  =-ARR1*(0.5*U2*UD1 + VVTP*(VPHP1/UHM1 + 0.75*UHE1))
     &            -ARR2*(0.5*U2*UD2 + VVTP*(VPHP2/UHM2 + 0.75*UHE2))
     &            -ARR3*(0.5*U2*UD3 + VVTP*(VPHP3/UHM3 + 0.75*UHE3))

          ENPLUI  =-ARR1I*(0.5*U2*UD1I + VVTI*(VPHP1/UHM1I + 0.75*UHE1I))
     &            -ARR2I*(0.5*U2*UD2I + VVTI*(VPHP2/UHM2I + 0.75*UHE2I))
     &            -ARR3I*(0.5*U2*UD3I + VVTI*(VPHP3/UHM3I + 0.75*UHE3I))

          ENMI   = ARR1*(0.5*UH21*UD1 - VPHH1*VVTHU1 + 0.75*VVTH1*UPE1)

          ENMII  = ARR1I*(0.5*UH21*UD1I - VPHH1*VVTH1/UIM1 + 0.75*VVTH1*UIE1)
!         
          if ((REG(CHF_IX[i;j;k]) .eq. 1) .or. (REG(CHF_IX[i;j;k]) .eq. 4)) then
            H1     = DENPLU2 + DENPLU3
            H2     = PPLU1   + PMI1
            H3     = PPLU2   + PMI2
            H4     = PPLU3   + PMI3
            H5     = ENPLU   + ENMI

            S(CHF_IX[i;j;k],UMOMX) =-dt*h23
            S(CHF_IX[i;j;k],UMOMY) =-dt*h33
            S(CHF_IX[i;j;k],UMOMZ) =-dt*h43
            
            S(CHF_IX[i;j;k],UENG ) =-dt*h53
          else
            H1     =-DENPLU1 - DENPLU1I
            H2     = PMI1 + PMI1I
            H3     = PMI2 + PMI2I
            H4     = PMI3 + PMI3I
            H5     = ENMI + ENMII

            S(CHF_IX[i;j;k],UMOMX) =-dt*(h23+h23I)
            S(CHF_IX[i;j;k],UMOMY) =-dt*(h33+h33I)
            S(CHF_IX[i;j;k],UMOMZ) =-dt*(h43+h43I)
            
            S(CHF_IX[i;j;k],UENG ) =-dt*(h53+h53I)
          endif




          S(CHF_IX[i;j;k],iRhoN )    =-dt*H1

          S(CHF_IX[i;j;k],iUMOMX1)   =-dt*H2
          S(CHF_IX[i;j;k],iUMOMY1)   =-dt*H3
          S(CHF_IX[i;j;k],iUMOMZ1)   =-dt*H4

          S(CHF_IX[i;j;k],iUENG1 )   =-dt*H5
!         HmPH for population 2 in R2                                                          Pauls & Zank
          PMI1   = ARR2*(ux2*UD2 + (ux2 - ux)*VVTHU2)
          PMI2   = ARR2*(uy2*UD2 + (uy2 - uy)*VVTHU2)
          PMI3   = ARR2*(uz2*UD2 + (uz2 - uz)*VVTHU2)
!         HmIH
          PMI1I   = ARR2I*(ux2*UD2I + (ux2-ux)*VVTH2/UIM2)
          PMI2I   = ARR2I*(uy2*UD2I + (uy2-uy)*VVTH2/UIM2)
          PMI3I   = ARR2I*(uz2*UD2I + (uz2-uz)*VVTH2/UIM2)

          ENMI   = ARR2*(0.5*UH22*UD2 - VPHH2*VVTHU2 + 0.75*VVTH2*UPE2)

          ENMII  = ARR2I*(0.5*UH22*UD2I - VPHH2*VVTH2/UIM2 + 0.75*VVTH2*UIE2)

          if( REG(CHF_IX[i;j;k]) .eq. 2 ) then
            H1     = DENPLU1 + DENPLU3 + DENPLU1I + DENPLU3I
            H2     = PPLU1   + PMI1    + PPLU1I   + PMI1I
            H3     = PPLU2   + PMI2    + PPLU2I   + PMI2I
            H4     = PPLU3   + PMI3    + PPLU3I   + PMI3I
            H5     = ENPLU   + ENMI    + ENPLUI   + ENMII
          else if( REG(CHF_IX[i;j;k]) .eq. 3 ) then
            H1     =-DENPLU2 - DENPLU2I
            H2     = PMI1 + PMI1I
            H3     = PMI2 + PMI2I
            H4     = PMI3 + PMI3I
            H5     = ENMI + ENMII
          else
            H1     =-DENPLU2
            H2     = PMI1
            H3     = PMI2
            H4     = PMI3
            H5     = ENMI
          endif      

          S(CHF_IX[i;j;k],iURHO2 )  =-dt*H1

          S(CHF_IX[i;j;k],iUMOMX2)  =-dt*H2
          S(CHF_IX[i;j;k],iUMOMY2)  =-dt*H3
          S(CHF_IX[i;j;k],iUMOMZ2)  =-dt*H4

          S(CHF_IX[i;j;k],iUENG2 )  =-dt*H5
!         HmPH for population 3 in R3                                                          Pauls & Zank
          PMI1   = ARR3*(ux3*UD3 + (ux3 - ux)*VVTHU3)
          PMI2   = ARR3*(uy3*UD3 + (uy3 - uy)*VVTHU3)
          PMI3   = ARR3*(uz3*UD3 + (uz3 - uz)*VVTHU3)
!         HmIH
          PMI1I   = ARR3I*(ux3*UD3I + (ux3-ux)*VVTH3/UIM3)
          PMI2I   = ARR3I*(uy3*UD3I + (uy3-uy)*VVTH3/UIM3)
          PMI3I   = ARR3I*(uz3*UD3I + (uz3-uz)*VVTH3/UIM3)

          ENMI   = ARR3*(0.5*UH23*UD3 - VPHH3*VVTHU3 + 0.75*VVTH3*UPE3)

          ENMII  = ARR3I*(0.5*UH23*UD3I - VPHH3*VVTH3/UIM3 + 0.75*VVTH3*UIE3)

!!--------------------------------------------------------
!!Federico PUI wave energy subtracted (goes in part to turbulence and in part to SW heating, through turbulence):
!!Notes: (i) in Usmanov2016, (Vsw-VH)*VA is used. In Isenberg, Vsw^2*zita, where zita depends on VA throug an integral of the pitch angle
!!           here, I am using the average relative speeds U^rho_ak that take into account the ion and neutral distribution fucntions (Maxwellian). Maybe using the energy velocities is better U^e_ka?
!!        (ii) Usmanov has Q2 = rho*EPI/3 = 0.5*(gamma-1)*rho*EPI (if gamma=5/3). The 0.5 factor is there is correct because Z^2 is twice the energy.
!
! 
!
!          HPturb1 = 0.5*fD*( UD1*VA/rho*(-DENPLU1) )
!!          HPturb1I = 0.5*fD*( UD1I*VA*(-DENPLU1I) )
!          HPturb2 = 0.5*rho*fD*( UD2*VA*(-DENPLU2) )
!!          HPturb2I = 0.5*fD*( UD2I*VA*(-DENPLU2I) )
!!-----------------------------------------------------



          if( REG(CHF_IX[i;j;k]) .eq. 3 ) then
            H1     = DENPLU1 + DENPLU2 + DENPLU1I + DENPLU2I
            H2     = PPLU1   + PMI1 + PPLU1I + PMI1I
            H3     = PPLU2   + PMI2 + PPLU2I + PMI2I
            H4     = PPLU3   + PMI3 + PPLU3I + PMI3I
            H5     = ENPLU   + ENMI + ENPLUI + ENMII
            IR     = DENPLU1 + DENPLU2 - DENPLU3I

!            HP     = HpP1+HpP2+HpI1-Hp1I+HpI2-Hp2I-Hp3I

!RKB -->SW heating
!5 percent PUI pressure source terms transfer
            HP     =  0.95*(HpP1+HpP2+HpI1+HpI2) -Hp1I-Hp2I-Hp3I


!Federico (heating): 
!            HP  = HP - HPturb1  - HPturb2 


!	    if ( (i .eq. 45) .and. (j .eq. 0) .and. (k .eq. 48) ) then
!	    	print *, "HpP1 = ", HpP1," at ",i,j,k
!	    	print *, "HpP2 = ", HpP2," at ",i,j,k
!	    	print *, "HpI1 = ", HpI1," at ",i,j,k
!	    	print *, "HpI2 = ", HpI2," at ",i,j,k
!	    	print *, "Hp1I = ", Hp1I," at ",i,j,k
!	    	print *, "Hp2I = ", Hp2I," at ",i,j,k
!	    	print *, "Hp3I = ", Hp3I," at ",i,j,k
!                print *, " "
!                print *, "HPturb1 = ", HPturb1," at ",i,j,k
!                print *, "HPturb1I = ", HPturb1I," at ",i,j,k
!                print *, "HPturb2 = ", HPturb2," at ",i,j,k
!                print *, "HPturb2I = ", HPturb2I," at ",i,j,k
!                print *, " "
!	    	print *, "HP = ", HP," at ",i,j,k
!                print *, "HPturb_095_v1 = ", 0.05*(HpP1+HpP2+HpI1-Hp1I+HpI2-Hp2I-Hp3I)," at ",i,j,k
!                print *, "HPturb_095_v2 = ", 0.05*(HpP1+HpP2+HpI1+HpI2)," at ",i,j,k
!                print *, "HPturb_Wave = ", HPturb1+HPturb1I+HPturb2+HPturb2I," at ",i,j,k
!
!
!	    endif
          else if( REG(CHF_IX[i;j;k]) .eq. 2 ) then
            H1     =-DENPLU3 - DENPLU3I
            H2     = PMI1 + PMI1I
            H3     = PMI2 + PMI2I
            H4     = PMI3 + PMI3I
            H5     = ENMI + ENMII
!similar to Malama et al 2005
!            IR     = DENPLU2 + DENPLU3 - DENPLU1I
!PUIs only gained in region 2
!            IR     = DENPLU1 + DENPLU2 + DENPLU3
!PUIs only lost in region 2
            IR     = -DENPLU1I - DENPLU2I - DENPLU3I
!similar to Malama et al 2005
!            HP     = HpP1+HpP2-Hp1I+HpI2-Hp2I+HpI3-Hp3I
!PUIs only gained in region 2
!            HP     = HpP1+HpP2+HpP3+HpI1-Hp1I+HpI2-Hp2I+HpI3-Hp3I
!PUIs only lost in region 2
            HP     = -Hp1I-Hp2I-Hp3I
          else
            H1     =-DENPLU3
            H2     = PMI1
            H3     = PMI2
            H4     = PMI3
            H5     = ENMI
            IR     = zero
            HP     = zero
          endif

          HP     = (gamma - 1.0D0)*HP

          S(CHF_IX[i;j;k],iURHO3 )  =-dt*H1

          S(CHF_IX[i;j;k],iUMOMX3)  =-dt*H2
          S(CHF_IX[i;j;k],iUMOMY3)  =-dt*H3
          S(CHF_IX[i;j;k],iUMOMZ3)  =-dt*H4

          S(CHF_IX[i;j;k],iUENG3 )  =-dt*H5

!          if(-dt*IR+W(CHF_IX[i;j;k],iRhoPIW) .le. 1.0D-12) then
!                print *, "IR > pI"
!                IR = zero
!          endif
!          S(CHF_IX[i;j;k],iRhoPIU  ) =-dt*IR
          S(CHF_IX[i;j;k],iRhoPIU  ) =-dt*IR

!          if(dt*HP+W(CHF_IX[i;j;k],iPresPIW) .le. 1.0D-12) then
!                print *, "HP > pI"
!                HP = zero
!                S(CHF_IX[i;j;k],iPresPIU) = 1.0D-12-W(CHF_IX[i;j;k],iPresPIW)
!          else
          S(CHF_IX[i;j;k],iPresPIU) = dt*HP



!                S(CHF_IX[i;j;k],iPresPIU) = half*dt*HP !assumes superthermal electrons
!          endif

!RKB ----------------------------------------------------------
!priting source terms along nose direction

!         if ( (j .eq. 1) .and. (k .eq. 48) ) then
!            region = REG(CHF_IX[i;j;k])
!            sp =    (gamma - 1.0D0)* (S(CHF_IX[i;j;k],UENG ) - (ux*S(CHF_IX[i;j;k],UMOMX) +uy*S(CHF_IX[i;j;k],UMOMY) +uz*S(CHF_IX[i;j;k],UMOMZ)))/dt
!            sn_I =  S(CHF_IX[i;j;k],iRhoPIU)/dt
!            sp_I =  S(CHF_IX[i;j;k],iPresPIU)/dt
!            sn_H1 = S(CHF_IX[i;j;k],iRhoN )/dt
!            sp_H1 = (gamma - 1.0D0)*(S(CHF_IX[i;j;k],iUENG1 ) - (ux1* S(CHF_IX[i;j;k],iUMOMX1) +uy1* S(CHF_IX[i;j;k],iUMOMY1) + uz1*S(CHF_IX[i;j;k],iUMOMZ1)))/dt
!            sn_H2 = S(CHF_IX[i;j;k],iURHO2 )/dt
!            sp_H2 = (gamma - 1.0D0)*(S(CHF_IX[i;j;k],iUENG2 )- (ux2* S(CHF_IX[i;j;k],iUMOMX2) +uy1* S(CHF_IX[i;j;k],iUMOMY2) + uz2*S(CHF_IX[i;j;k],iUMOMZ2)))/dt
!            sn_H3 = S(CHF_IX[i;j;k],iURHO3 )/dt
!            sp_H3 = (gamma - 1.0D0)*(S(CHF_IX[i;j;k],iUENG3 ) - (ux3* S(CHF_IX[i;j;k],iUMOMX3) +uy3* S(CHF_IX[i;j;k],iUMOMY3) + uz3*S(CHF_IX[i;j;k],iUMOMZ3)))/dt
!
!            sp_S = sp -sp_I
!
!            !sources for 0.5*vth^2 = 2p/rho
!            sVT = sp/rho
!            sVT_I = sp_I/rhoI - (pI/rhoI**2)*sn_I
!            sVT_S = sp_S/rhoS - (pS/rhoS**2)*(-sn_I)
!            sVT_H1 = sp_H1/rho1 - (p1/rho1**2)*sn_H1
!            sVT_H2 = sp_H2/rho2 - (p2/rho2**2)*sn_H2
!            sVT_H3 = sp_H3/rho3 - (p3/rho3**2)*sn_H3
!
!           write(*,102) i, sp, sVT, sn_I, sp_I, sVT_I, sp_S, sVT_S, sn_H1, sp_H1, sVT_H1, sn_H2, sp_H2, sVT_H2, sn_H3, sp_H3, sVT_H3
!102        format (i4,16e13.4)
!
!        endif
!----------------------------------------------------------------------


        CHF_ENDDO

        return
        end
