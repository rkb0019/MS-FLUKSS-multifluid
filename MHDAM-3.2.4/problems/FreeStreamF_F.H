#ifndef _FREESTREAMF_F_H_
#define _FREESTREAMF_F_H_

#include "FORT_PROTO.H"
#include "CH_Timer.H"
#include "REAL.H"

extern "C"
{

#ifndef GUARDSETFREESTREAM 
#define GUARDSETFREESTREAM 
// Prototype for Fortran procedure SETFREESTREAM ...
//
void FORTRAN_NAME( SETFREESTREAM ,setfreestream )(
      CHFp_CONST_REAL(augamma)
      ,CHFp_CONST_REAL(auM)
      ,CHFp_CONST_REAL(auaA) );

#define FORT_SETFREESTREAM FORTRAN_NAME( inlineSETFREESTREAM, inlineSETFREESTREAM)
#define FORTNT_SETFREESTREAM FORTRAN_NAME( SETFREESTREAM, setfreestream)

inline void FORTRAN_NAME(inlineSETFREESTREAM, inlineSETFREESTREAM)(
      CHFp_CONST_REAL(augamma)
      ,CHFp_CONST_REAL(auM)
      ,CHFp_CONST_REAL(auaA) )
{
 CH_TIMELEAF("FORT_SETFREESTREAM");
 FORTRAN_NAME( SETFREESTREAM ,setfreestream )(
      CHFt_CONST_REAL(augamma)
      ,CHFt_CONST_REAL(auM)
      ,CHFt_CONST_REAL(auaA) );
}
#endif  // GUARDSETFREESTREAM 

#ifndef GUARDFREESTREAMSPHERICALU 
#define GUARDFREESTREAMSPHERICALU 
// Prototype for Fortran procedure FREESTREAMSPHERICALU ...
//
void FORTRAN_NAME( FREESTREAMSPHERICALU ,freestreamsphericalu )(
      CHFp_FRA(U)
      ,CHFp_BOX(box) );

#define FORT_FREESTREAMSPHERICALU FORTRAN_NAME( inlineFREESTREAMSPHERICALU, inlineFREESTREAMSPHERICALU)
#define FORTNT_FREESTREAMSPHERICALU FORTRAN_NAME( FREESTREAMSPHERICALU, freestreamsphericalu)

inline void FORTRAN_NAME(inlineFREESTREAMSPHERICALU, inlineFREESTREAMSPHERICALU)(
      CHFp_FRA(U)
      ,CHFp_BOX(box) )
{
 CH_TIMELEAF("FORT_FREESTREAMSPHERICALU");
 FORTRAN_NAME( FREESTREAMSPHERICALU ,freestreamsphericalu )(
      CHFt_FRA(U)
      ,CHFt_BOX(box) );
}
#endif  // GUARDFREESTREAMSPHERICALU 

#ifndef GUARDFREESTREAMPOLARW 
#define GUARDFREESTREAMPOLARW 
// Prototype for Fortran procedure FREESTREAMPOLARW ...
//
void FORTRAN_NAME( FREESTREAMPOLARW ,freestreampolarw )(
      CHFp_FRA(W)
      ,CHFp_BOX(box)
      ,CHFp_CONST_INT(level) );

#define FORT_FREESTREAMPOLARW FORTRAN_NAME( inlineFREESTREAMPOLARW, inlineFREESTREAMPOLARW)
#define FORTNT_FREESTREAMPOLARW FORTRAN_NAME( FREESTREAMPOLARW, freestreampolarw)

inline void FORTRAN_NAME(inlineFREESTREAMPOLARW, inlineFREESTREAMPOLARW)(
      CHFp_FRA(W)
      ,CHFp_BOX(box)
      ,CHFp_CONST_INT(level) )
{
 CH_TIMELEAF("FORT_FREESTREAMPOLARW");
 FORTRAN_NAME( FREESTREAMPOLARW ,freestreampolarw )(
      CHFt_FRA(W)
      ,CHFt_BOX(box)
      ,CHFt_CONST_INT(level) );
}
#endif  // GUARDFREESTREAMPOLARW 

#ifndef GUARDFREESTREAMSPHERICALW 
#define GUARDFREESTREAMSPHERICALW 
// Prototype for Fortran procedure FREESTREAMSPHERICALW ...
//
void FORTRAN_NAME( FREESTREAMSPHERICALW ,freestreamsphericalw )(
      CHFp_FRA(W)
      ,CHFp_BOX(box)
      ,CHFp_CONST_INT(level) );

#define FORT_FREESTREAMSPHERICALW FORTRAN_NAME( inlineFREESTREAMSPHERICALW, inlineFREESTREAMSPHERICALW)
#define FORTNT_FREESTREAMSPHERICALW FORTRAN_NAME( FREESTREAMSPHERICALW, freestreamsphericalw)

inline void FORTRAN_NAME(inlineFREESTREAMSPHERICALW, inlineFREESTREAMSPHERICALW)(
      CHFp_FRA(W)
      ,CHFp_BOX(box)
      ,CHFp_CONST_INT(level) )
{
 CH_TIMELEAF("FORT_FREESTREAMSPHERICALW");
 FORTRAN_NAME( FREESTREAMSPHERICALW ,freestreamsphericalw )(
      CHFt_FRA(W)
      ,CHFt_BOX(box)
      ,CHFt_CONST_INT(level) );
}
#endif  // GUARDFREESTREAMSPHERICALW 

#ifndef GUARDFREESTREAMCARTESIANW 
#define GUARDFREESTREAMCARTESIANW 
// Prototype for Fortran procedure FREESTREAMCARTESIANW ...
//
void FORTRAN_NAME( FREESTREAMCARTESIANW ,freestreamcartesianw )(
      CHFp_FRA(W)
      ,CHFp_BOX(box) );

#define FORT_FREESTREAMCARTESIANW FORTRAN_NAME( inlineFREESTREAMCARTESIANW, inlineFREESTREAMCARTESIANW)
#define FORTNT_FREESTREAMCARTESIANW FORTRAN_NAME( FREESTREAMCARTESIANW, freestreamcartesianw)

inline void FORTRAN_NAME(inlineFREESTREAMCARTESIANW, inlineFREESTREAMCARTESIANW)(
      CHFp_FRA(W)
      ,CHFp_BOX(box) )
{
 CH_TIMELEAF("FORT_FREESTREAMCARTESIANW");
 FORTRAN_NAME( FREESTREAMCARTESIANW ,freestreamcartesianw )(
      CHFt_FRA(W)
      ,CHFt_BOX(box) );
}
#endif  // GUARDFREESTREAMCARTESIANW 

}

#endif
